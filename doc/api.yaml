
# Defining User, UserProfile, Photo, and possibly Stream, Likes and Comments
components:
  schemas:
          
    UsernameFormat:
      description: |-
        The required format of a username
      type: string
      example: Sir Wilburt Coddington III
      pattern: '^[a-zA-Z0-9\s]*$'
      minLength: 3
      maxLength: 30   
          
    UserProfile:
      description: |-
        Schema of a user's profile. Note that it does not include the blacklist or the userID.
      type: object
      properties:
        nphotos:
          description: Number of photos of user
          type: integer
          example: 42
        photos:
          description: User's photos
          type: array
          minItems: 0
          maxItems: 9999
          items:
            $ref: '#/components/schemas/Photo'
        # other properties needed will be subsequently added
        followers:
          description: The list of user's followers
          type: array
          minItems: 0
          maxItems: 9999
          items:
            $ref: '#/components/schemas/UsernameFormat'
        following:
          description: The list of followed users
          type: array
          minItems: 0
          maxItems: 9999
          items: 
            $ref: '#/components/schemas/UsernameFormat'
    
    Photo:
      description: |-
        Schema of photo resources, which, other than the photo's binary data itself, also includes other fields.
      type: object
      properties:
        photoID:
          description: Photo's ID
          type: integer
          example: 12345
        # the photo itself
        photoData:
          description: The binary data of the photo
          type: string
          pattern: "[01]*"
          minLength: 1
          maxLength: 9999
          format: binary
        photoDescription:
          description: Optional, a text to accompany the photo
          type: string
          pattern: '^[a-zA-Z0-9\s]*$'
          minLength: 0
          maxLength: 9999
        # other data
        likes:
          description: Number of likes on photo
          type: integer
          format: int64
          minimum: 0
        comments:
          description: The comments on the photo
          type: array
          minItems: 0
          maxItems: 9999
          items: 
            type: string
            pattern: '^[a-zA-Z0-9\s]*$'
            minLength: 1
            maxLength: 9999
        date:
          description: Photo's upload date
          type: string
          format: date-time
          minLength: 20
          maxLength: 20
    
    Error:
      description: |-
        Generic error response's format
      type: object
      properties:
        code:
          description: Error's HTTP response code
          type: string
          pattern: "4[0-9]*"
          minLength: 3
          maxLength: 3
        message:
          description: Error's associated message
          type: string
          pattern: '^[a-zA-Z0-9\s]*$'
          minLength: 1
          maxLength: 9999
      required:
        - code 
        - message
        
  
  responses:  
    InvalidUsername:
      description: (400) Username invalid
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    Unauthorised:
      description: (401) Operation unauthorised, identifier missing or invalid
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    NotFound:
      description: (404) Resource not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
        
          
  securitySchemes:
    identifier:
      type: http
      scheme: bearer
      bearerFormat: JWT
      
# The following would apply security globally. Let's do it method by method instead     
# security:
#   - identifier: []
          
          
###################################################


openapi: 3.0.3
info:
  title: WASAPhoto
  description: | 
    Keep in touch with your friends by sharing photos of special moments, thanks to WASAPhoto! You can upload your photos directly from your PC, and they will be visible to everyone following you.
  version: 1.0.0
paths:
  /login:
    post:
      tags: ["Session"]
      summary: Logs in the user
      description: |      
        If the user does not exist, it will be created, and an identifier is returned. If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UsernameFormat"
        required: true
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  identifier:
                    # change here if you decide to use an integer
                    # or any other type of identifier
                    type: integer
                    example: 01234
        "400":
          $ref: "#/components/responses/InvalidUsername"
                      
          
  # set username        
  /users/{uID}/username:
    put:
      tags: ["General"]
      summary: Changes own username
      description: Change current username
      operationId: setMyUserName
      parameters:
        - name: uID
          in: path
          description: Current user's id
          required: True
          schema:
            type: integer
            example: 01234
            
      requestBody:
        description: New username
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UsernameFormat"
      responses:
        "204":
          description: New username set
          # Note: it may be the same as old one, not counted as error
        "400":
          $ref: "#/components/responses/InvalidUsername"
        "401":
          $ref: "#/components/responses/Unauthorised"
      # as we're modifying current user's data, we need to ensure client and {username} correspond, so we need the identifier
      security:
        - identifier: []
        
  # get user's profile      
  /users/{uName}/profile:
    get:
      tags: ["General"]
      summary: Search given user
      description: Get the profile of given user
      operationId: getUserProfile
      parameters:
        - name: uName
          in: path
          description: Searched user's username
          required: True
          schema:
             $ref: "#/components/schemas/UsernameFormat"
      responses:
        "200":
          description: Searched user's profile
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfile"
        "400":
          $ref: "#/components/responses/InvalidUsername"
        "404":
          $ref: "#/components/responses/NotFound"
      # and here, since we are just retrieving public data, security is not required 
      security:
        - identifier: []
  
  
  # adding/removing user to/from following
  /users/{uID}/profile/following/{user2}:
    parameters:
    - name: uID
      in: path
      required: True
      description: Current user's ID
      schema:
        type: integer
        example: 01234
    - name: user2
      in: path
      required: True
      description: Target user (user to unfollow)
      schema:
       $ref: "#/components/schemas/UsernameFormat"
    put:
      tags: ["U2U"]
      summary: Follow user
      description: Add a user to the list of followed users
      operationId: followUser
      responses:
        "204":
          description: User followed
        "400":
          $ref: "#/components/responses/InvalidUsername"
        "401":
          $ref: "#/components/responses/Unauthorised"
        "404":
          $ref: "#/components/responses/NotFound"
      security:
        - identifier: []
    delete:
      tags: ["U2U"]
      summary: Unfollow user
      description: Remove user from followed users' list
      operationId: unfollowUser
      responses:
        "204":
          description: User unfollowed
        "400":
          $ref: "#/components/responses/InvalidUsername" 
          # despite this being a delete operation, we still warn the user if user is not found, in case they misspelled the username, hence the use of 400 and 404
        "401":
          $ref: "#/components/responses/Unauthorised"
        "404":
          $ref: "#/components/responses/NotFound"
      security:
        - identifier: []
    
  # ban/unban user
  /users/{uID}/blacklist/{user2}:
    parameters:
    - name: uID
      in: path
      description: Current user's ID
      required: True
      schema:
        type: integer
        example: 01234
    - name: user2
      in: path
      description: Target user's name
      required: True
      schema:
        $ref: "#/components/schemas/UsernameFormat"
    put:
      tags: ["U2U"]
      summary: Ban designated user
      description: Ban user by adding them to blacklist 
      operationId: banUser
      responses:
        "204":
          description: User added to blacklist
        "400":
          $ref: "#/components/responses/InvalidUsername"
        "401":
          $ref: "#/components/responses/Unauthorised"
        "404":
          $ref: "#/components/responses/NotFound"
      security:
        - identifier: []
    delete:
      tags: ["U2U"]
      summary: Unban designated user
      description: Remove user from blacklist
      operationId: unbanUser
      responses:
        "204":
          description: User removed from blacklist
        "400":
          $ref: "#/components/responses/InvalidUsername"
        "401":
          $ref: "#/components/responses/Unauthorised"
        "404":
          $ref: "#/components/responses/NotFound"
      security:
        - identifier: []
      
  # upload photos
  /users/{uID}/profile/photos:
    parameters:
    - name: uID
      in: path
      description: Current user's ID
      required: True
      schema:
        type: integer
        example: 01234
    post:
      tags: ["General", "Photos"]
      summary: Upload a photo to your profile
      description: After uploading the photo, the server returns its id
      operationId: uploadPhoto
      requestBody:
        required: True
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                photo:
                  $ref: "#/components/schemas/Photo"
      responses:
        "201":
          description: Photo uploaded, returning photo's id
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 01234
        "401":
          $ref: "#/components/responses/Unauthorised"
      security:
        - identifier: []
        
  # delete photo 
  /users/{uID}/profile/photos/{photoID}:
    parameters:
    - name: uID
      in: path
      description: Current user's ID
      required: True
      schema:
        type: integer
        example: 01234
    - name: photoID
      in: path
      description: Photo's ID
      required: True
      schema:
        type: integer
        format: int64
        example: 01234
    delete:
      tags: ["General", "Photos"]
      summary: Delete photo
      description: Deletes a photo with its likes and comments
      operationId: deletePhoto
      responses:
        "204":
          description: Photo deleted
        "401":
          $ref: "#/components/responses/Unauthorised"
        "404":
          $ref: "#/components/responses/NotFound"
      security:
        - identifier: []
    
  # Liking/unliking a photo
  /photos/{photoID}/likes/{uID}:
    parameters:
    - name: photoID
      in: path
      required: True
      description: Photo's ID
      schema:
        type: integer
        example: 01234
    - name: uID
      in: path
      required: True
      description: ID of the user liking the photo
      schema:
        type: integer
        example: 01234
    put:
      tags: ["Photos"]
      summary: Like the selected photo
      description: Put a like to a photo
      operationId: likePhoto
      responses:
        "204":
          description: Photo liked
        "401":
          $ref: "#/components/responses/Unauthorised"
        # "404":
        #   $ref: "#/components/responses/NotFound"
      security:
        - identifier: []
    delete:
      tags: ["Photos"]
      summary: Unlike selected photo
      description: Unlike the photo
      operationId: unlikePhoto
      responses:
        "204": 
          description: Photo unliked
        "401":
          $ref: "#/components/responses/Unauthorised"
        # "404":
        #   $ref: "#/components/responses/NotFound"
      security:
        - identifier: []
  
  # commenting a photo
  /photos/{photoID}/comments:
    parameters:
    - name: photoID
      in: path
      description: Photo's ID
      required: True
      schema:
        type: integer
        format: int64
    post:
      tags: ["Photos"]
      summary: Comment on a photo
      description: Posts comment and returns the comment ID
      operationId: commentPhoto
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: "This is an example comment"
              pattern: '^[a-zA-Z0-9\s]*$'
              minLength: 1
              maxLength: 9999
      responses:
        "201":
          description: Comment posted, returning its ID
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 01234
        "401":
          $ref: "#/components/responses/Unauthorised"
        # "404":
        #   $ref: "#/components/responses/NotFound"
      security:
        - identifier: []
        
  # Uncommenting a photo
  /photos/{photoID}/comments/{commentID}:
    parameters:
    - name: photoID
      in: path
      description: Photo's ID
      required: True
      schema:
        type: integer
        format: int64
    - name: commentID
      in: path
      description: Comment's ID
      required: True
      schema:
        type: integer
    delete:
      tags: ["Photos"]
      summary: Eliminate a comment
      description: Delete comment with specified ID
      operationId: uncommentPhoto
      responses:
        "204":
          description: Comment deleted
        "401":
          $ref: "#/components/responses/Unauthorised"
        "404":
          $ref: "#/components/responses/NotFound"
      security:
        - identifier: []
  
  # Stream
  /users/{uID}/Stream:
    parameters:
    - name: uID
      in: path
      required: True
      description: ID of the user
      schema:
        type: integer
        example: 01234
    get:
      tags: ["General"]
      summary: Gets a user's stream
      description: | 
        Only provide user's id to server, the logical part (retrieving following, then getting their photos) is done backend.
      operationId: getMyStream
      responses:
        "200":
          description: User's stream retrieved
          content: 
            application/json:
              schema:
                type: array
                minItems: 0
                maxItems: 9999
                items:
                  $ref: "#/components/schemas/Photo"
        "401":
          $ref: "#/components/responses/Unauthorised"
      security:
        - identifier: []
      
    
